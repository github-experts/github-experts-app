{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "appName": {
      "type": "string",
      "minLength": 3,
      "maxLength": 19,
      "metadata": {
        "description": "Name for the deployment"
      }
    },
    "b2cClientId": {
      "type": "string",
      "minLength": 36,
      "maxLength": 36,
      "metadata": {
        "description": "Name of the client application used for B2C authentication"
      }
    },
    "b2cTenantName": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Name of the tenant used for B2C authentication"
      }
    },
    // TODO
    "sendgridPassword": {
      "type": "string",
      "metadata": {
        "description": "Password for the SendGrid service"
      }
    },
    "sendgridApiKey": {
      "type": "string",
      "metadata": {
        "description": "API Key for the SendGrid service"
      }
    },
    // SKU parameters
    "storageAccountSku": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_RAGRS"
      ]
    },
    "cosmosThroughput": {
      "type": "int",
      "defaultValue": 400,
      "minValue": 400,
      "maxValue": 10000,
      "metadata": {
        "description": "Number of RUs to provision for database"
      }
    },
    "GITHUB_APP_ID": {
      "type": "String"
    },
    "GITHUB_CLIENT_ID": {
      "type": "String"
    },
    "GITHUB_CLIENT_SECRET": {
      "type": "String"
    }
  },
  "variables": {
    "frontendName": "[concat(parameters('appName'), 'ui')]",
    "backendName": "[concat(parameters('appName'), 'api')]",
    "serviceBusName": "[concat(parameters('appName'), 'sb')]",
    "databaseName": "[concat(parameters('appName'), 'cosmos')]",
    "location": "[resourceGroup().location]",
    "github_app_name": "[concat(parameters('appName'), 'githubapp')]",
    "serverfarms_github_app_name": "[variables('github_app_name')]",
    "storageaccount_github_app_name": "[variables('github_app_name')]",
    "defaultSASKeyName": "RootManageSharedAccessKey",
    "authRuleResourceId": "[resourceId('Microsoft.ServiceBus/namespaces/authorizationRules', variables('serviceBusName'), variables('defaultSASKeyName'))]",
    "sbVersion": "2017-04-01" //,
    //"sendgridName": "[concat(parameters('appName'), 'sendGrid')]"
  },
  "resources": [
    /* #region Frontend */
    // Static website storage account to hold Frontend client-side app
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('frontendName')]",
      "apiVersion": "2019-06-01",
      "location": "[variables('location')]",
      "kind": "StorageV2",
      "sku": {
        "name": "[parameters('storageAccountSku')]"
      }
    },
    /* #endregion */
    /* #region Backend */
    // Backing storage account for Backend Azure Function
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('backendName')]",
      "apiVersion": "2019-06-01",
      "location": "[variables('location')]",
      "kind": "StorageV2",
      "sku": {
        "name": "[parameters('storageAccountSku')]"
      }
    },
    // Hosting plan for Backend Azure Function
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2018-02-01",
      "name": "[variables('backendName')]",
      "location": "[variables('location')]",
      "sku": {
        "name": "Y1",
        "tier": "Dynamic"
      },
      "properties": {
        "name": "[variables('backendName')]",
        "computeMode": "Dynamic"
      }
    },
    // Monitoring for Backend Azure Function
    {
      "apiVersion": "2015-05-01",
      "name": "[variables('backendName')]",
      "type": "Microsoft.Insights/components",
      "location": "[variables('location')]",
      "kind": "web",
      "tags": {
        "[concat('hidden-link:', resourceId('Microsoft.Web/sites', variables('backendName')))]": "Resource"
      },
      "properties": {
        "Application_Type": "web"
      }
    },
    // Cosmos Table Storage
    {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2020-04-01",
      "name": "[variables('databaseName')]",
      "location": "[variables('location')]",
      "tags": {
        "defaultExperience": "Azure Table",
        "hidden-cosmos-mmspecial": "",
        "CosmosAccountType": "Non-Production"
      },
      "kind": "GlobalDocumentDB",
      "properties": {
        "publicNetworkAccess": "Enabled",
        "enableAutomaticFailover": false,
        "enableMultipleWriteLocations": false,
        "isVirtualNetworkFilterEnabled": false,
        "virtualNetworkRules": [],
        "disableKeyBasedMetadataWriteAccess": false,
        "enableFreeTier": false,
        "enableAnalyticalStorage": false,
        "databaseAccountOfferType": "Standard",
        "consistencyPolicy": {
          "defaultConsistencyLevel": "BoundedStaleness",
          "maxIntervalInSeconds": 86400,
          "maxStalenessPrefix": 1000000
        },
        "locations": [
          {
            "locationName": "[variables('location')]",
            "failoverPriority": 0,
            "isZoneRedundant": false
          }
        ],
        "capabilities": [
          {
            "name": "EnableTable"
          }
        ],
        "ipRules": []
      },
      "resources": [
        {
          "type": "tables",
          "apiVersion": "2020-04-01",
          "name": "experts",
          "dependsOn": [
            "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('databaseName'))]"
          ],
          "properties": {
            "resource": {
              "id": "experts"
            },
            "options": {
              "throughput": "[parameters('cosmosThroughput')]"
            }
          }
        },
        {
          "type": "tables",
          "apiVersion": "2020-04-01",
          "name": "schedule",
          "dependsOn": [
            "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('databaseName'))]"
          ],
          "properties": {
            "resource": {
              "id": "schedule"
            },
            "options": {
              "throughput": "[parameters('cosmosThroughput')]"
            }
          }
        }
      ]
    },
    // Service Bus
    {
      "type": "Microsoft.ServiceBus/namespaces",
      "apiVersion": "2017-04-01",
      "name": "[variables('serviceBusName')]",
      "location": "[variables('location')]",
      "sku": {
        "name": "Basic",
        "tier": "Basic"
      },
      "properties": {
        "zoneRedundant": false
      }
    },
    {
      "type": "Microsoft.ServiceBus/namespaces/AuthorizationRules",
      "apiVersion": "2017-04-01",
      "name": "[concat(variables('serviceBusName'), '/RootManageSharedAccessKey')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces', variables('serviceBusName'))]"
      ],
      "properties": {
        "rights": [
          "Listen",
          "Manage",
          "Send"
        ]
      }
    },
    {
      "type": "Microsoft.ServiceBus/namespaces/queues",
      "apiVersion": "2017-04-01",
      "name": "[concat(variables('serviceBusName'), '/email')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces', variables('serviceBusName'))]"
      ],
      "properties": {
        "lockDuration": "PT30S",
        "maxSizeInMegabytes": 1024,
        "requiresDuplicateDetection": false,
        "requiresSession": false,
        "defaultMessageTimeToLive": "P14D",
        "deadLetteringOnMessageExpiration": false,
        "enableBatchedOperations": true,
        "duplicateDetectionHistoryTimeWindow": "PT10M",
        "maxDeliveryCount": 10,
        "status": "Active",
        "enablePartitioning": false,
        "enableExpress": false
      }
    },
    {
      "type": "Microsoft.ServiceBus/namespaces/queues",
      "apiVersion": "2017-04-01",
      "name": "[concat(variables('serviceBusName'), '/tosend')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces', variables('serviceBusName'))]"
      ],
      "properties": {
        "lockDuration": "PT30S",
        "maxSizeInMegabytes": 1024,
        "requiresDuplicateDetection": false,
        "requiresSession": false,
        "defaultMessageTimeToLive": "P14D",
        "deadLetteringOnMessageExpiration": false,
        "enableBatchedOperations": true,
        "duplicateDetectionHistoryTimeWindow": "PT10M",
        "maxDeliveryCount": 10,
        "status": "Active",
        "enablePartitioning": false,
        "enableExpress": false
      }
    },
    // SendGrid
    // {
    //   "name": "[variables('sendgridName')]",
    //   "type": "Sendgrid.Email/accounts",
    //   "location": "[variables('location')]",
    //   "apiVersion": "2015-01-01",
    //   "plan": {
    //       "name": "free",
    //       "publisher": "Sendgrid",
    //       "product": "sendgrid_azure",
    //       "promotionCode": ""
    //   },
    //   "properties": {
    //       "password": "[parameters('sendgridPassword')]",
    //       "acceptMarketingEmails": false,
    //       "email": ""
    //   }
    // },
    // Backend Azure Function
    {
      "apiVersion": "2018-11-01",
      "type": "Microsoft.Web/sites",
      "name": "[variables('backendName')]",
      "location": "[variables('location')]",
      "kind": "functionapp",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('databaseName'))]",
        "[resourceId('Microsoft.Web/serverfarms', variables('backendName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('backendName'))]"
      ],
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('backendName'))]",
        "siteConfig": {
          "appSettings": [
            // Backend runtime settings
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('backendName'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('backendName')), '2019-06-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('backendName'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('backendName')), '2019-06-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[toLower(variables('backendName'))]"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(concat('Microsoft.Insights/components/', variables('backendName'))).InstrumentationKey]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~3"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "dotnet"
            },
            {
              "name": "SCM_DO_BUILD_DURING_DEPLOYMENT",
              "value": "false"
            },
            // Backend application environment variables
            {
              "name": "FRONTEND_HOSTNAME",
              "value": "[replace(replace(reference(concat('Microsoft.Storage/storageAccounts/', variables('frontendName'))).primaryEndpoints.web, 'https://', ''), '/', '')]"
            },
            {
              "name": "COSMOS_DATABASE_NAME",
              "value": "[variables('databaseName')]"
            },
            {
              "name": "COSMOS_PRIMARY_KEY",
              "value": "[listkeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('databaseName')), '2020-04-01').primaryMasterKey]"
            },
            {
              "name": "COSMOS_SECONDARY_KEY",
              "value": "[listkeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('databaseName')), '2020-04-01').secondaryMasterKey]"
            },
            {
              "name": "SERVICE_BUS_CONNECTION_STRING",
              "value": "[listkeys(variables('authRuleResourceId'), variables('sbVersion')).primaryConnectionString]"
            },
            {
              "name": "SENDGRID_KEY",
              "value": "[parameters('sendgridApiKey')]"
            }
          ]
        }
      },
      "resources": [
        // Enable CORS from Frontend to Backend
        {
          "apiVersion": "2018-11-01",
          "type": "Microsoft.Web/sites/config",
          "name": "[concat(variables('backendName'), '/web')]",
          "location": "[variables('location')]",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('backendName'))]"
          ],
          "properties": {
            "cors": {
              "allowedOrigins": [
                "http://localhost:3000",
                "[replace(replace(reference(concat('Microsoft.Storage/storageAccounts/', variables('frontendName'))).primaryEndpoints.web, 'https://', ''), '/', '')]"
              ],
              "supportCredentials": true
            }
          }
        },
        // Lock-down Backend with AAD B2C EasyAuth
        {
          "apiVersion": "2018-11-01",
          "type": "Microsoft.Web/sites/config",
          "name": "[concat(variables('backendName'), '/authsettings')]",
          "location": "[variables('location')]",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('backendName'))]"
          ],
          "properties": {
            "enabled": true,
            "unauthenticatedClientAction": "RedirectToLoginPage",
            "tokenStoreEnabled": true,
            "defaultProvider": "AzureActiveDirectory",
            "clientId": "[parameters('b2cClientId')]",
            "issuer": "[concat('https://', parameters('b2cTenantName'), '.b2clogin.com/', parameters('b2cTenantName'), '.onmicrosoft.com/v2.0/.well-known/openid-configuration?p=B2C_1_github')]"
          }
        }
      ]
    },

    // Github app
    {
        "type": "microsoft.insights/components",
        "apiVersion": "2018-05-01-preview",
        "name": "[variables('github_app_name')]",
        "location": "[variables('location')]",
        "kind": "web",
        "properties": {
            "Application_Type": "web",
            "RetentionInDays": 90,
            "publicNetworkAccessForIngestion": "Enabled",
            "publicNetworkAccessForQuery": "Enabled"
        }
    },
    {
        "type": "Microsoft.Storage/storageAccounts",
        "apiVersion": "2019-06-01",
        "name": "[variables('storageaccount_github_app_name')]",
        "location": "[variables('location')]",
        "sku": {
            "name": "Standard_LRS",
            "tier": "Standard"
        },
        "kind": "Storage",
        "properties": {
            "networkAcls": {
                "bypass": "AzureServices",
                "virtualNetworkRules": [],
                "ipRules": [],
                "defaultAction": "Allow"
            },
            "supportsHttpsTrafficOnly": true,
            "encryption": {
                "services": {
                    "file": {
                        "keyType": "Account",
                        "enabled": true
                    },
                    "blob": {
                        "keyType": "Account",
                        "enabled": true
                    }
                },
                "keySource": "Microsoft.Storage"
            }
        }
    },
    {
        "type": "Microsoft.Web/serverfarms",
        "apiVersion": "2018-02-01",
        "name": "[variables('serverfarms_github_app_name')]",
        "location": "[variables('location')]",
        "sku": {
            "name": "Y1",
            "tier": "Dynamic",
            "size": "Y1",
            "family": "Y",
            "capacity": 0
        },
        "kind": "functionapp",
        "properties": {
            "perSiteScaling": false,
            "maximumElasticWorkerCount": 1,
            "isSpot": false,
            "reserved": false,
            "isXenon": false,
            "hyperV": false,
            "targetWorkerCount": 0,
            "targetWorkerSizeId": 0
        }
    },
    {
        "type": "Microsoft.Storage/storageAccounts/blobServices",
        "apiVersion": "2019-06-01",
        "name": "[concat(variables('storageaccount_github_app_name'), '/default')]",
        "dependsOn": [
            "[resourceId('Microsoft.Storage/storageAccounts', variables('storageaccount_github_app_name'))]"
        ],
        "sku": {
            "name": "Standard_LRS",
            "tier": "Standard"
        },
        "properties": {
            "cors": {
                "corsRules": []
            },
            "deleteRetentionPolicy": {
                "enabled": false
            }
        }
    },
    {
        "type": "Microsoft.Storage/storageAccounts/fileServices",
        "apiVersion": "2019-06-01",
        "name": "[concat(variables('storageaccount_github_app_name'), '/default')]",
        "dependsOn": [
            "[resourceId('Microsoft.Storage/storageAccounts', variables('storageaccount_github_app_name'))]"
        ],
        "sku": {
            "name": "Standard_LRS",
            "tier": "Standard"
        },
        "properties": {
            "cors": {
                "corsRules": []
            }
        }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2018-11-01",
      "name": "[variables('github_app_name')]",
      "location": "[variables('location')]",
      "dependsOn": [
          "[resourceId('Microsoft.Web/serverfarms', variables('serverfarms_github_app_name'))]"
      ],
      "kind": "functionapp",
      "properties": {
          "enabled": true,
          "hostNameSslStates": [
              {
                  "name": "[concat(variables('github_app_name'), '.azurewebsites.net')]",
                  "sslState": "Disabled",
                  "hostType": "Standard"
              },
              {
                  "name": "[concat(variables('github_app_name'), '.scm.azurewebsites.net')]",
                  "sslState": "Disabled",
                  "hostType": "Repository"
              }
          ],
          "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('serverfarms_github_app_name'))]",
          "reserved": false,
          "isXenon": false,
          "hyperV": false,
          "siteConfig": {
            "appSettings": [
              {
                "name": "AzureWebJobsStorage",
                "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('github_app_name'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('github_app_name')), '2019-06-01').keys[0].value)]"
              },
              {
                "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('github_app_name'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('github_app_name')), '2019-06-01').keys[0].value)]"
              },
              {
                "name": "WEBSITE_CONTENTSHARE",
                "value": "[toLower(variables('github_app_name'))]"
              },
              {
                "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                "value": "[reference(concat('Microsoft.Insights/components/', variables('github_app_name'))).InstrumentationKey]"
              },
              {
                "name": "FUNCTIONS_EXTENSION_VERSION",
                "value": "~3"
              },
              {
                "name": "FUNCTIONS_WORKER_RUNTIME",
                "value": "node"
              },
              {
                "name": "SCM_DO_BUILD_DURING_DEPLOYMENT",
                "value": "false"
              },
              {
                "name": "GITHUB_APP_ID",
                "value": "[parameters('GITHUB_APP_ID')]"
              },
              {
                "name": "GITHUB_CLIENT_ID",
                "value": "[parameters('GITHUB_CLIENT_ID')]"
              },
              {
                "name": "GITHUB_CLIENT_SECRET",
                "value": "[parameters('GITHUB_CLIENT_SECRET')]"
              }
            ]
          },
          "scmSiteAlsoStopped": false,
          "clientAffinityEnabled": true,
          "clientCertEnabled": false,
          "hostNamesDisabled": false,
          "containerSize": 1536,
          "dailyMemoryTimeQuota": 0,
          "httpsOnly": false,
          "redundancyMode": "None"
      }
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2018-11-01",
      "name": "[concat(variables('github_app_name'), '/web')]",
      "location": "[variables('location')]",
      "dependsOn": [
          "[resourceId('Microsoft.Web/sites', variables('github_app_name'))]"
      ],
      "properties": {
          "numberOfWorkers": -1,
          "defaultDocuments": [
              "Default.htm",
              "Default.html",
              "Default.asp",
              "index.htm",
              "index.html",
              "iisstart.htm",
              "default.aspx",
              "index.php"
          ],
          "netFrameworkVersion": "v4.0",
          "phpVersion": "5.6",
          "requestTracingEnabled": false,
          "remoteDebuggingEnabled": false,
          "remoteDebuggingVersion": "VS2019",
          "httpLoggingEnabled": false,
          "logsDirectorySizeLimit": 35,
          "detailedErrorLoggingEnabled": false,
          "publishingUsername": "$github-app",
          "scmType": "None",
          "use32BitWorkerProcess": true,
          "webSocketsEnabled": false,
          "alwaysOn": false,
          "managedPipelineMode": "Integrated",
          "virtualApplications": [
              {
                  "virtualPath": "/",
                  "physicalPath": "site\\wwwroot",
                  "preloadEnabled": false
              }
          ],
          "loadBalancing": "LeastRequests",
          "experiments": {
              "rampUpRules": []
          },
          "autoHealEnabled": false,
          "cors": {
              "allowedOrigins": [
                  "https://functions.azure.com",
                  "https://functions-staging.azure.com",
                  "https://functions-next.azure.com"
              ],
              "supportCredentials": false
          },
          "localMySqlEnabled": false,
          "ipSecurityRestrictions": [
              {
                  "ipAddress": "Any",
                  "action": "Allow",
                  "priority": 1,
                  "name": "Allow all",
                  "description": "Allow all access"
              }
          ],
          "scmIpSecurityRestrictions": [
              {
                  "ipAddress": "Any",
                  "action": "Allow",
                  "priority": 1,
                  "name": "Allow all",
                  "description": "Allow all access"
              }
          ],
          "scmIpSecurityRestrictionsUseMain": false,
          "http20Enabled": false,
          "minTlsVersion": "1.2",
          "ftpsState": "AllAllowed",
          "reservedInstanceCount": 0
      }
    }// ,
    // {
    //     "type": "Microsoft.Web/sites/deployments",
    //     "apiVersion": "2018-11-01",
    //     "name": "[concat(variables('github_app_name'), '/7afe3349c90a44b1b8515589b0235138')]",
    //     "location": "[variables('location')]",
    //     "dependsOn": [
    //         "[resourceId('Microsoft.Web/sites', variables('github_app_name'))]"
    //     ],
    //     "properties": {
    //         "status": 4,
    //         "author_email": "N/A",
    //         "author": "N/A",
    //         "deployer": "ZipDeploy",
    //         "message": "Created via a push deployment",
    //         "start_time": "2020-07-30T18:43:13.5410641Z",
    //         "end_time": "2020-07-30T18:43:24.338095Z",
    //         "active": true
    //     }
    // },
    // {
    //     "type": "Microsoft.Web/sites/functions",
    //     "apiVersion": "2018-11-01",
    //     "name": "[concat(variables('github_app_name'), '/Setup')]",
    //     "location": "[variables('location')]",
    //     "dependsOn": [
    //         "[resourceId('Microsoft.Web/sites', variables('github_app_name'))]"
    //     ],
    //     "properties": {
    //         "script_root_path_href": "https://github-app.azurewebsites.net/admin/vfs/site/wwwroot/Setup/",
    //         "script_href": "https://github-app.azurewebsites.net/admin/vfs/site/wwwroot/Setup/index.js",
    //         "config_href": "https://github-app.azurewebsites.net/admin/vfs/site/wwwroot/Setup/function.json",
    //         "href": "https://github-app.azurewebsites.net/admin/functions/Setup",
    //         "config": {}
    //     }
    // },
    // {
    //     "type": "Microsoft.Web/sites/functions",
    //     "apiVersion": "2018-11-01",
    //     "name": "[concat(variables('github_app_name'), '/YamlConfig')]",
    //     "location": "[variables('location')]",
    //     "dependsOn": [
    //         "[resourceId('Microsoft.Web/sites', variables('github_app_name'))]"
    //     ],
    //     "properties": {
    //         "script_root_path_href": "https://github-app.azurewebsites.net/admin/vfs/site/wwwroot/YamlConfig/",
    //         "script_href": "https://github-app.azurewebsites.net/admin/vfs/site/wwwroot/YamlConfig/index.js",
    //         "config_href": "https://github-app.azurewebsites.net/admin/vfs/site/wwwroot/YamlConfig/function.json",
    //         "href": "https://github-app.azurewebsites.net/admin/functions/YamlConfig",
    //         "config": {}
    //     }
    // },
    // {
    //     "type": "Microsoft.Web/sites/hostNameBindings",
    //     "apiVersion": "2018-11-01",
    //     "name": "[concat(variables('github_app_name'), '/', variables('github_app_name'), '.azurewebsites.net')]",
    //     "location": "[variables('location')]",
    //     "dependsOn": [
    //         "[resourceId('Microsoft.Web/sites', variables('github_app_name'))]"
    //     ],
    //     "properties": {
    //         "siteName": "github-app",
    //         "hostNameType": "Verified"
    //     }
    // },
    // {
    //     "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
    //     "apiVersion": "2019-06-01",
    //     "name": "[concat(variables('storageaccount_github_app_name'), '/default/azure-webjobs-hosts')]",
    //     "dependsOn": [
    //         "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageaccount_github_app_name'), 'default')]",
    //         "[resourceId('Microsoft.Storage/storageAccounts', variables('storageaccount_github_app_name'))]"
    //     ],
    //     "properties": {
    //         "publicAccess": "None"
    //     }
    // },
    // {
    //     "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
    //     "apiVersion": "2019-06-01",
    //     "name": "[concat(variables('storageaccount_github_app_name'), '/default/azure-webjobs-secrets')]",
    //     "dependsOn": [
    //         "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageaccount_github_app_name'), 'default')]",
    //         "[resourceId('Microsoft.Storage/storageAccounts', variables('storageaccount_github_app_name'))]"
    //     ],
    //     "properties": {
    //         "publicAccess": "None"
    //     }
    // },
    // {
    //     "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
    //     "apiVersion": "2019-06-01",
    //     "name": "[concat(variables('storageaccount_github_app_name'), '/default/github-appb318')]",
    //     "dependsOn": [
    //         "[resourceId('Microsoft.Storage/storageAccounts/fileServices', variables('storageaccount_github_app_name'), 'default')]",
    //         "[resourceId('Microsoft.Storage/storageAccounts', variables('storageaccount_github_app_name'))]"
    //     ],
    //     "properties": {
    //         "shareQuota": 5120
    //     }
    // }
    /* #endregion */
  ],
  "outputs": {
    "frontendStorageAccountResourceId": {
      "type": "string",
      "value": "[concat(resourceGroup().id, '/providers/Microsoft.Storage/storageAccounts/', variables('frontendName'))]"
    },
    "frontendHostname": {
      "type": "string",
      "value": "[replace(replace(reference(concat('Microsoft.Storage/storageAccounts/', variables('frontendName'))).primaryEndpoints.web, 'https://', ''), '/', '')]"
    },
    "backendFunctionAppName": {
      "type": "string",
      "value": "[variables('backendName')]"
    },
    "backendHostName": {
      "type": "string",
      "value": "[reference(concat('Microsoft.Web/sites/', variables('backendName'))).defaultHostName]"
    },
    "githubAppFunctionName": {
      "type": "string",
      "value": "[variables('github_app_name')]"
    }
  }
}
